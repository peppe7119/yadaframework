buildscript {
	repositories {
		mavenCentral()
		mavenLocal()
	}
	dependencies {
		// Needed for test schema creation
		classpath 'net.yadaframework:yadatools:0.7.2'
		// classpath 'kr.motd.gradle:sphinx-gradle-plugin:2.2.0'
	}                    
}

plugins {
	id 'java-library'
	id 'maven-publish'
}

group = 'net.yadaframework'
version = '0.7.3'

// PublishToMavenLocal task
publishing {
    publications {
        maven(MavenPublication) {
            artifactId = 'yadaweb'
            from components.java
        }
    }
}

apply plugin: 'eclipse-wtp'
// apply plugin: 'kr.motd.sphinx'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}
eclipse {
	jdt {
		sourceCompatibility = 1.8
		targetCompatibility = 1.8
		// https://stackoverflow.com/a/35302104/587641
		file {
      		File dir = file('.settings')
      		dir.mkdirs()
      		File f = file('.settings/org.eclipse.core.resources.prefs')
      		if (!f.exists()) {
      			f.write('eclipse.preferences.version=1\n')
      			f.append('encoding/<project>=utf-8')
      		}
    	}
	}
	classpath {
        downloadJavadoc = true
        downloadSources = true
    }
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

repositories {
    mavenCentral()
	mavenLocal()
}

dependencies {
	// Using "api" to keep things simple: no need to repeat the libraries in other projects for compilation

	api 'org.apache.commons:commons-configuration2:2.+'
	
	// Fixes commons-text:1.9 CVE-2022-42889 caused by commons-configuration2:2.8.0
	api 'org.apache.commons:commons-text:1.+'
	
    api 'org.apache.tomcat.embed:tomcat-embed-core:8.5.+'
	// For embedded Tomcat ONLY - add these to your project
    // runtimeOnly 'org.apache.tomcat:tomcat-el-api:8.5.+'
    // runtimeOnly 'org.apache.tomcat:tomcat-jasper-el:8.5.+'
    // runtimeOnly 'org.apache.tomcat:tomcat-jasper:8.5.+'
	
	// Needed by Commons Configuration
    api 'commons-jxpath:commons-jxpath:1.+'
	
    api 'org.springframework:spring-webmvc:5.3.+',
		'org.springframework:spring-context-support:5.3.+',
		'org.springframework:spring-orm:5.3.+',
		// 'org.springframework.social:spring-social-facebook:2.0.3.RELEASE',
        'org.hibernate:hibernate-entitymanager:5.6.15.Final',
		'org.hibernate:hibernate-validator:5.4.3.Final',
		'org.thymeleaf:thymeleaf-spring5:3.1.1.RELEASE',
		'mysql:mysql-connector-java:8.+',
		'commons-collections:commons-collections:3.+',
		'org.apache.tomcat:tomcat-servlet-api:8.5.+',
		'commons-fileupload:commons-fileupload:1.4',
		'org.apache.commons:commons-exec:1.3',
		'com.sun.mail:javax.mail:1.+',
		'com.google.guava:guava:31.1-jre',
		'org.jsoup:jsoup:1.+',
		'ch.qos.logback:logback-classic:1.3.+',
		'com.fasterxml.jackson.core:jackson-databind:2.+',
		'org.seleniumhq.selenium:selenium-java:4.+',
		'com.drewnoakes:metadata-extractor:2.+',
		'org.flywaydb:flyway-core:5.+',
		'commons-beanutils:commons-beanutils:1.9.+'
		
	 // Connection pool for embedded Tomcat and programmatic datasource
	api 'org.vibur:vibur-dbcp:25.+'
	runtimeOnly 'com.googlecode.concurrentlinkedhashmap:concurrentlinkedhashmap-lru:1.4.+'
	
	// Needed to run in Tomcat
	// runtime 'commons-jxpath:commons-jxpath:1.3'

	testImplementation 'junit:junit:4.+',
	 	'org.springframework:spring-test:4.3.+'
	
	// testRuntimeOnly 'commons-beanutils:commons-beanutils:1.9.+',
	// 	'commons-jxpath:commons-jxpath:1.3'
		
}

task listJars {
	doLast {
		configurations.compile.each { File file -> println file.name }
	}
}

jar {
    manifest {
        attributes("Implementation-Title": "YadaWeb",
                   "Implementation-Version": archiveVersion)
    }
}

// Set the yada version in the properties file
processResources {
	doLast {
		ant.replace(file: "${sourceSets.main.output.resourcesDir}/net.yadaframework.yadaweb.properties", token: '@YADA_VERSION@', value: version)
	}
}


javadoc {
    options.encoding = 'UTF-8'
    options.docEncoding = 'UTF-8'
    options.charSet = 'UTF-8'
}

// http://stackoverflow.com/a/27853822/587641
task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}   

artifacts {
    archives javadocJar
}

configurations {
	hibtools {
		extendsFrom configurations.implementation
	}
}

dependencies {
	hibtools files("$buildDir/classes/java/main")
	hibtools files("$buildDir/classes/java/test") // Needed for yadaPersistenceUnit
	hibtools 'org.hibernate:hibernate-tools:5.2.10.Final'
}

task testDbSchema(dependsOn: [testClasses], type: net.yadaframework.tools.YadaCreateDbSchemaTask) {
	inputs.files configurations.hibtools
	outputfilename = "V1__yadatest.sql"
	doFirst {
		new File("$buildDir/classes/java/test/META-INF").mkdirs()
		copy {
			from "$buildDir/resources/test/META-INF/persistence.test.xml"
			into "$buildDir/classes/java/test/META-INF"
			rename 'persistence.test.xml', 'persistence.xml'
		} 
	}
	doLast { 
		delete "$buildDir/classes/java/test/META-INF/persistence.xml"
	}
}


